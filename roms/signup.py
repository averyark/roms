# @fileName: signup.py
# @creation_date: 14/09/2024
# @authors: averyark

""" Note: This description is generated by Copilot
This module handles the signup process for new users. It includes functions to validate user data, check for existing users, and insert new user data into a SQLite database. Additionally, it sets user credentials upon successful signup.
"""

from icecream import ic
from pydantic import BaseModel

from .user import User, validate_user_data
from .credentials import set_credentials
from .api import app

from fastapi import HTTPException, status
from fastapi import Depends
from typing import Annotated

import sqlite3
credentialsPath = 'mock-database.db'
db = sqlite3.connect(credentialsPath)
cursor = db.cursor()

class UserInfo(BaseModel):
    birthday: str
    first_name: str
    last_name: str
    email: str
    password: str

def create_userdata(data: UserInfo, userPermission: int):
    cursor.execute(
        f'''
            INSERT INTO Userdata(
                user_id,
                email,
                first_name,
                last_name,
                birthday,
                permission_level
                ) VALUES (
                    NULL,
                    '{data.email}',
                    '{data.first_name}',
                    '{data.last_name}',
                    '{data.birthday}',
                    {userPermission or "10"}
                )
        '''
    )
    db.commit()

# NOTE: This is a management level api
def create_account(data: UserInfo, permissionLevel):
    validate_user_data(data)

    cursor.execute(
        f'''
            SELECT DISTINCT * FROM Userdata WHERE email IS '{data.email}'
        '''
    )
    row = cursor.fetchone()

    if row:
        raise LookupError("This email already exist in the database")

    try:
        create_userdata(data, permissionLevel)
        set_credentials(data.email, data.password)
    except Exception as err:
        raise err

# NOTE: You cannot input permissionLevel from this api
@app.post(path="/account/signup")
async def signup(data: UserInfo):
    try:
        validate_user_data(data)

        cursor.execute(
            f'''
                SELECT DISTINCT * FROM Userdata WHERE email IS '{data.email}'
            '''
        )
        row = cursor.fetchone()

        if row:
            raise LookupError("This email already exist in the database")

        try:
            create_userdata(data, 10)
            set_credentials(data.email, data.password)
        except Exception as err:
            raise err
    except LookupError as err:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail=err
        )
    except Exception as err:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=err
        )
